using System.Collections.Generic;
using UnityEditor.VersionControl;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.XR.iOS;

public class GameManager : MonoBehaviour
{
    public enum ARState
    {
        ScanPlane,
        PlacedScene
    }

    public enum GameState
    {
        Readying,
        PlayerTurn,
        EnemyTurn,
        Resolution
    }

    public enum UIState
    {
        Empty,
        Selected
    }

    public float createHeight;
    public float maxRayDistance = 30.0f;
    public ARState state;
    private ARState _state = ARState.ScanPlane;
    public GameState gameStage;
    private GameState _gameStage = GameState.Readying;
    public UIState uiStage;
    private UIState _uiStage = UIState.Empty;
    public bool anchored;
    public static GameManager instance;
    public GameObject planeObject;
    public GameObject planePrefab;
    private UnityARAnchorManager unityARAnchorManager;
    public GameObject _currentScene;
    //public NavMeshData meshdata;
    
    public delegate void GameStateChangeHandler();
    public event GameStateChangeHandler GameStateChange;
    public delegate void UIStateChangeHandler();
    public event UIStateChangeHandler UIStateChange;
    public delegate void ARStateChangeHandler();
    public event ARStateChangeHandler ARStateChange;

    // Use this for initialization
    private void Awake()
    {
        if (instance == null)
        {
            instance = this;
            state = ARState.ScanPlane;
            gameStage = GameState.Readying;
            planeObject.SetActive(true);
        }
        if (instance != this) DestroyImmediate(gameObject);
    }
                 private void Start()
                 {
                     if(GameStateChange != null)GameStateChange();
                     if(UIStateChange != null)UIStateChange();
                     if(ARStateChange != null)ARStateChange();
                     //ARStateChange();
                 }

    void Update()
    {
        if (_gameStage != gameStage)
        {
            _gameStage = gameStage;
            if(GameStateChange != null)
            GameStateChange();
        }if (_state != state)
        {
            _state = state;
            if(ARStateChange != null)
            ARStateChange();
        }  if (_uiStage != uiStage)
        {
            _uiStage = uiStage;
            if(UIStateChange != null)
            UIStateChange();
        }    
        if (state == ARState.ScanPlane)
        {
            if (Input.GetMouseButtonDown(0))
            {
                var ray = Camera.main.ScreenPointToRay(Input.mousePosition);
                RaycastHit hit;

                //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
                //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
                if (Physics.Raycast(ray, out hit, maxRayDistance))
                {
                    SetScene(hit.point, hit.transform.parent);

                    //we're going to get the position from the contact point
                    Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", hit.point.x, hit.point.y,
                        hit.point.z));
                }
            }
        }
    }

    void SetScene(Vector3 atPosition, Transform parent)
    {
        if (!_currentScene.activeSelf)
        {
            //_currentScene = Instantiate(planePrefab, atPosition, Quaternion.identity, parent);
           // Vector3 offset = (meshdata.position - _currentScene.transform.position);
            _currentScene.transform.position = atPosition;
            //meshdata.position = atPosition;
           // NavMesh.RemoveAllNavMeshData();
           // NavMesh.AddNavMeshData(meshdata);
            //_currentScene.transform.parent = parent;
            _currentScene.SetActive(true);
            planeObject.SetActive(false);
            state = ARState.PlacedScene;
            gameStage = GameState.PlayerTurn;
        }
    }

    public void RemoveScene()
    {
        Destroy(_currentScene);
        state = ARState.ScanPlane;
        
        planeObject.SetActive(true);
    }
}